./configure~:   Do not test the value of __STDC__, because some compilers set it to 0
./configure~:#if !defined __STDC__
./configure~:#if defined(__STDC__) || defined(_MSC_VER) || defined(__cplusplus)
./configure~:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./configure.ac~:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./configure.ac:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./config-bot.h~:/* Try this without testing __STDC__ for the time being. */
./configure:   Do not test the value of __STDC__, because some compilers set it to 0
./configure:#if !defined __STDC__
./configure:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./autom4te.cache/traces.0:         && !(defined __SUNPRO_C && __STDC__))) \\
./autom4te.cache/traces.1:         && !(defined __SUNPRO_C && __STDC__))) \\
./autom4te.cache/output.0:   Do not test the value of __STDC__, because some compilers set it to 0
./autom4te.cache/output.0:#if !defined __STDC__
./autom4te.cache/output.0:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./autom4te.cache/output.1:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.1:#ifdef __STDC__
./autom4te.cache/output.1:  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.1:@%:@ifdef __STDC__
./autom4te.cache/output.1:  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.1:@%:@ifdef __STDC__
./autom4te.cache/output.1:#if defined(__STDC__) || defined(_MSC_VER) || defined(__cplusplus)
./autom4te.cache/output.1:#ifndef __STDC__
./autom4te.cache/output.1:#ifndef __STDC__
./autom4te.cache/output.1:#ifndef __STDC__
./autom4te.cache/output.1:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./autom4te.cache/output.3:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.3:#ifdef __STDC__
./autom4te.cache/output.3:  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.3:@%:@ifdef __STDC__
./autom4te.cache/output.3:  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.3:@%:@ifdef __STDC__
./autom4te.cache/output.3:#if defined(__STDC__) || defined(__cplusplus)
./autom4te.cache/output.3:#ifndef __STDC__
./autom4te.cache/output.3:#ifndef __STDC__
./autom4te.cache/output.3:#ifndef __STDC__
./autom4te.cache/output.3:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./autom4te.cache/output.2:  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:@%:@ifdef __STDC__
./autom4te.cache/output.2:  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:@%:@ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:#if defined(__STDC__) || defined(__cplusplus)
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:#ifndef __STDC__
./autom4te.cache/output.2:#ifndef __STDC__
./autom4te.cache/output.2:#ifndef __STDC__
./autom4te.cache/output.2:    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since
./autom4te.cache/output.2:#ifdef __STDC__
./autom4te.cache/output.2:ibmrt-*bsd4*)	LOCAL_CFLAGS="-ma -U__STDC__" ;;
./include/memalloc.h~:#      if defined (__STDC__)
./include/memalloc.h~:#      endif /* !__STDC__ */
./include/stdc.h:#  if defined (__STDC__) || defined (__GNUC__) || defined (__cplusplus) || defined (PROTOTYPES)
./include/stdc.h:#if !defined (__STDC__)
./include/stdc.h:#endif /* !__STDC__ */
./include/stdc.h~:#  if defined (__STDC__) || defined (__GNUC__) || defined (__cplusplus) || defined (PROTOTYPES)
./include/stdc.h~:#if !defined (__STDC__)
./include/stdc.h~:#endif /* !__STDC__ */
./CWRU/old-conf/machines.h:   /* SGI cc uses ansi c features *without* defining __STDC__ */
./CWRU/old-conf/machines.h:#  if defined (__EXTENSIONS__) && !defined (__STDC__)
./CWRU/old-conf/machines.h:#    define ANSIC -D__STDC__
./CWRU/old-conf/machines.h:#  endif /* !__EXTENSIONS__ || __STDC__ */
./CWRU/old-conf/machines.h:#    define SYSDEP_CFLAGS -ma -U__STDC__
./CWRU/old-conf/machines.h:#    if defined (__STDC__)
./CWRU/old-conf/machines.h:#    endif /* __STDC__ */
./CWRU/old-changelogs/CWRU.chlog.v11:	- hpux_9 needs alloca declared as `extern void *' if __STDC__
./CWRU/old-changelogs/CWRU.chlog.v11:	  if __STDC__ is defined and we're using stdarg
./CWRU/old-changelogs/CWRU.chlog.v10:	- add a __STDC__ definition for getpwnam() for isc386 machines
./CWRU/old-changelogs/CWRU.chlog.v10:	- correctly declare the second argument as a size_t if __STDC__
./CWRU/old-changelogs/CWRU.chlog.v10:	  on whether __STDC__ is defined and > 0.  The `stdc' version uses
./CWRU/old-changelogs/CWRU.chlog.v10:	- sgi needs __STDC__ defined if __EXTENSIONS__ is defined
./CWRU/old-changelogs/CWRU.chlog.v10:	- moved the #if defined (__P) inside the check for __STDC__, so
./CWRU/old-changelogs/CWRU.chlog.v10:	- if __STDC__ is defined but we're not using gcc (__GNUC__ not
./CWRU/old-changelogs/CWRU.chlog.v10:	- only test for and possibly define __STDC__ if __GNUC__ is not
./CWRU/old-changelogs/CWRU.chlog.v10:	- removed support for outputting -D__STDC__; it's rarely right
./CWRU/old-changelogs/CHANGES.090393:__STDC__ is defined
./CWRU/old-changelogs/CWRU.chlog.v12:	- add prototypes for extern function declarations if __STDC__
./CWRU/old-changelogs/CWRU.chlog.v12:	- break the definition of __P out from a strict __STDC__ block,
./CWRU/old-changelogs/CWRU.chlog.v12:	  as either `__const' (gcc -traditional) or nothing if __STDC__ and
./CWRU/old-changelogs/CWRU.chlog.v13:	  use `void *' and prototype if __STDC__ is defined
./CWRU/old-changelogs/CWRU.chlog.v13:	- don't test __STDC__ when deciding whether or not to use stdarg.h;
./CWRU/old-changelogs/CWRU.chlog.v13:	- don't try to use \a and \v unless __STDC__ is defined; use the
./CWRU/old-changelogs/CWRU.chlog.v9:	  __STDC__ is defined
./CWRU/old-changelogs/CWRU.chlog.v9:        - add extern declaration of strcpy if __STDC__ and strcpy not defined
./CWRU/old-changelogs/CWRU.chlog.v9:	  ANSI C environment (__STDC__)
./CWRU/old-changelogs/CWRU.chlog.v9:	- recognize __GNUC__ and __STDC__ and pass them along as output
./CWRU/old-changelogs/CWRU.chlog.v9:	  where __STDC__ is not defined and _POSIX_SOURCE is
./CWRU/old/RELEASE.113:__STDC__ is defined
./CWRU/CWRU.chlog~:	- restrict: make sure we have a definition if __STDC__ is not defined
./CWRU/CWRU.chlog~:	- don't bother with __STDC__ if we are just using C89 features like
./CWRU/CWRU.chlog:	- restrict: make sure we have a definition if __STDC__ is not defined
./CWRU/CWRU.chlog:	- don't bother with __STDC__ if we are just using C89 features like
./lib/intl/explodename.c:# if defined __STDC__ && __STDC__
./lib/intl/gmo.h:#if __STDC__
./lib/intl/gettextP.h:# if __STDC__ || defined __GNUC__ || defined __SUNPRO_C || defined __cplusplus || __PROTOTYPES
./lib/intl/loadinfo.h:# if __STDC__ || defined __GNUC__ || defined __SUNPRO_C || defined __cplusplus || __PROTOTYPES
./lib/intl/plural.c:#  if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:# if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#   if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#   if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:# if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:# if defined (__STDC__) || defined (__cplusplus)
./lib/intl/plural.c:#if defined (__STDC__) || defined (__cplusplus)
./lib/intl/localcharset.c:#if __STDC__ != 1
./lib/intl/l10nflist.c:# if defined __STDC__ && __STDC__
./lib/intl/libgnuintl.h.in:# if __STDC__ || defined __GNUC__ || defined __SUNPRO_C || defined __cplusplus || __PROTOTYPES
./lib/intl/libgnuintl.h.in:# if __GNUC__ >= 2 && !defined __APPLE_CC__ && (defined __STDC__ || defined __cplusplus)
./lib/readline/histlib.h~:#  if !defined (strchr) && !defined (__STDC__)
./lib/readline/histlib.h~:#  endif /* !strchr && !__STDC__ */
./lib/readline/rldefs.h~:#if !defined (strchr) && !defined (__STDC__)
./lib/readline/rldefs.h~:#endif /* !strchr && !__STDC__ */
./lib/readline/bind.c~:#if !defined (strchr) && !defined (__STDC__)
./lib/readline/bind.c~:#endif /* !strchr && !__STDC__ */
./lib/readline/parens.c:#if !defined (strchr) && !defined (__STDC__)
./lib/readline/parens.c:#endif /* !strchr && !__STDC__ */
./lib/readline/complete.c~:#ifdef __STDC__
./lib/readline/rlstdc.h:#  if defined (__STDC__) || defined (__GNUC__) || defined (__cplusplus)
./lib/readline/display.c~:#if !defined (strchr) && !defined (__STDC__)
./lib/readline/display.c~:#endif /* !strchr && !__STDC__ */
./lib/readline/rlstdc.h~:#  if defined (__STDC__) || defined (__GNUC__) || defined (__cplusplus)
./lib/readline/rlstdc.h~:#if defined (__STDC__) && defined (HAVE_STDARG_H)
./lib/readline/funmap.c~:#ifdef __STDC__
./lib/sh/vprint.c:#  if defined (__STDC__)
./lib/sh/vprint.c:#  endif /* __STDC__ */
./lib/termcap/grot/ChangeLog:	* termcap.h [__STDC__]: Add consts.  From Franc,ois Pinard.
./lib/malloc/OLD/ogmalloc.c:#if	defined (__GNU_LIBRARY__) || (defined (__STDC__) && __STDC__)
./lib/malloc/OLD/ogmalloc.c:#if defined (__cplusplus) || (defined (__STDC__) && __STDC__)
./lib/malloc/OLD/ogmalloc.c:#if defined (__STDC__) && __STDC__
./lib/malloc/OLD/omalloc.c:#    if defined (__STDC__)
./lib/malloc/OLD/omalloc.c:#if defined (__STDC__)
./lib/malloc/OLD/gmalloc.c:#if __STDC__
./lib/malloc/OLD/gmalloc.c:#endif /* !__STDC__ */
./lib/malloc/OLD/old-nmalloc.c:#  if defined (__STDC__)
./lib/malloc/OLD/old-nmalloc.c:#if defined (__STDC__)
./lib/malloc/shmalloc.h~:#if defined (__STDC__)
./lib/malloc/alloca.c~:#if __STDC__
./lib/malloc/imalloc.h~:#  if defined (__STDC__)
./lib/malloc/imalloc.h~:#  if defined (__STDC__) || defined (__GNUC__) || defined (__cplusplus) || defined (PROTOTYPES)
./lib/malloc/xmalloc.c~:#if defined (__STDC__)
./m4/iconv.m4~:#if defined(__STDC__) || defined(_MSC_VER) || defined(__cplusplus)
./m4/extern-inline.m4:         && !(defined __SUNPRO_C && __STDC__))) \
./aclocal.m4~:#ifdef __STDC__
./general.h~:#ifdef __STDC__
./aclocal.m4:#ifdef __STDC__
